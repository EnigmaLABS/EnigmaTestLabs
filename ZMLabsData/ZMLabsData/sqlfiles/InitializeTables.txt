create procedure InitializeTables
as
begin
	-->> 
	CREATE TABLE [dbo].[Categories](
		[id] [int] IDENTITY(1,1) NOT NULL,
		[Categorie] [nvarchar](255) NOT NULL,
		[Categorie_dad_id] [int] NULL,
	 CONSTRAINT [PK_dbo.Categories] PRIMARY KEY CLUSTERED 
	(
		[id] ASC
	)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
	) ON [PRIMARY]

	-->>
	CREATE TABLE [dbo].[Tests](
		[id] [bigint] IDENTITY(1,1) NOT NULL,
		[Test] [nvarchar](255) NOT NULL,
		[Description] [nvarchar](555) NULL,
		[Classname] [nvarchar](255) NULL,
		[Url_Blog] [nvarchar](555) NULL,
		[Url_Git] [nvarchar](555) NULL,
		[idCategorie] [int] NOT NULL,
	 CONSTRAINT [PK_dbo.Tests] PRIMARY KEY CLUSTERED 
	(
		[id] ASC
	)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
	) ON [PRIMARY]

	-->>
	CREATE TABLE [dbo].[TestCases](
		[id] [bigint] IDENTITY(1,1) NOT NULL,
		[Function] [nvarchar](255) NOT NULL,
		[Description] [nvarchar](555) NULL,
		[idTest] [bigint] NOT NULL,
	 CONSTRAINT [PK_dbo.TestCases] PRIMARY KEY CLUSTERED 
	(
		[id] ASC
	)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
	) ON [PRIMARY]

	-->>
	CREATE TABLE [dbo].[Executions](
		[id] [bigint] IDENTITY(1,1) NOT NULL,
		[dtBegin] [datetime] NOT NULL,
		[dtEnd] [datetime] NOT NULL,
		[idTestCase] [bigint] NOT NULL,
	 CONSTRAINT [PK_dbo.Executions] PRIMARY KEY CLUSTERED 
	(
		[id] ASC
	)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
	) ON [PRIMARY]


	-->>
	ALTER TABLE [dbo].[Categories]  WITH CHECK ADD  CONSTRAINT [FK_dbo.Categories_dbo.Categories_Categorie_dad_id] FOREIGN KEY([Categorie_dad_id])
	REFERENCES [dbo].[Categories] ([id])

	ALTER TABLE [dbo].[Categories] CHECK CONSTRAINT [FK_dbo.Categories_dbo.Categories_Categorie_dad_id]

	ALTER TABLE [dbo].[Tests]  WITH CHECK ADD  CONSTRAINT [FK_dbo.Tests_dbo.Categories_idCategorie] FOREIGN KEY([idCategorie])
	REFERENCES [dbo].[Categories] ([id])

	ALTER TABLE [dbo].[Tests] CHECK CONSTRAINT [FK_dbo.Tests_dbo.Categories_idCategorie]

	ALTER TABLE [dbo].[TestCases]  WITH CHECK ADD  CONSTRAINT [FK_dbo.TestCases_dbo.Tests_idTest] FOREIGN KEY([idTest])
	REFERENCES [dbo].[Tests] ([id])

	ALTER TABLE [dbo].[TestCases] CHECK CONSTRAINT [FK_dbo.TestCases_dbo.Tests_idTest]

	ALTER TABLE [dbo].[Executions]  WITH CHECK ADD  CONSTRAINT [FK_dbo.Executions_dbo.TestCases_idTestCase] FOREIGN KEY([idTestCase])
	REFERENCES [dbo].[TestCases] ([id])

	ALTER TABLE [dbo].[Executions] CHECK CONSTRAINT [FK_dbo.Executions_dbo.TestCases_idTestCase]

	-->>
	declare @sql varchar(2000)

	set @sql = '
	insert into Categories (Categorie, Categorie_dad_id) values (''SQL Server Tips'', null)
	insert into Categories (Categorie, Categorie_dad_id) values (''C# Code'', null)
	insert into Categories (Categorie, Categorie_dad_id) values (''Multithreading Tests'', 2)
	insert into Categories (Categorie, Categorie_dad_id) values (''Basics Tips'', 2)
	insert into Categories (Categorie, Categorie_dad_id) values (''Data Layer'', 1)'

	exec(@sql)

	set @sql = '
	insert into Tests (Test, Classname, [Description], Url_Blog, Url_Git, idCategorie) values (''Multithreading vs Singlethreading'', ''test1_multithreading_vs_singlethreading'', ''Calcula 500 veces 200 elementos de la serie fibonacci'', null, null, 3)
	insert into Tests (Test, Classname, [Description], Url_Blog, Url_Git, idCategorie) values (''Concatenate Strings'', ''test2_basicos_concatstrings'', ''Plus Operator Vs StringBuilder'', null, null, 4)
	insert into Tests (Test, Classname, [Description], Url_Blog, Url_Git, idCategorie) values (''Bulk Data - Store Procedure vs Entity Framework'', ''test3_sql_loaddata'', ''Generación de 26.200 registros de información para posteriormente, consolidarla en base de datos mediante distintas técnicas'', null, null, 5)'

	exec(@sql)

	set @sql = '
	insert into TestCases ([Function], [idTest], [Description]) values (''MultithreadingCase'', 1, ''Cálculo simultáneo de la serie fibo (500 hilos, 200 elementos por hilo)'')
	insert into TestCases ([Function], [idTest], [Description]) values (''SinglethreadingCase'', 1, ''Cálculo secuencial de la serie fibo (500 iteraciones, 200 elementos por iteración)'')
	insert into TestCases ([Function], [idTest], [Description]) values (''HybridCase'', 1, ''20 hilos calculan 25 veces cada uno la serie fibo'')

	insert into TestCases ([Function], [idTest], [Description]) values (''Concat_PlusOperator'', 2, ''Concatenación con operador + Concatena 100 veces 26 variables string con el operador'')
	insert into TestCases ([Function], [idTest], [Description]) values (''Concat_StringBuilder'', 2, ''Concatenación con StringBuilder: Concatena 100 veces 26 variables string con un StringBuilder'')

	insert into TestCases ([Function], [idTest], [Description]) values (''EFBulkData'', 3, ''Grabación de parte de horas anual para 100 trabajadores con Entity Framework'')
	insert into TestCases ([Function], [idTest], [Description]) values (''ADOBulkData_Datatable'', 3, ''Grabación de parte de horas anual para 100 trabajadores con ADO.NET convirtiendo con reflection la clase Parte_Horas en un DataTable que recibe un procedimiento almacenado como parámetro'')'

	exec(@sql)

	-->>
	-->> 27/04 ESTRUCTURA PARA TEST ADO VS EF
	--CREATE SCHEMA [test]

	CREATE TABLE [test].[ParteHoras](
	[id] [bigint] IDENTITY(1,1) NOT NULL,
	[Trabajador] [uniqueidentifier] NOT NULL,
	[Fecha] [datetime] NOT NULL,
	[Horas] [smallint] NOT NULL,
	 CONSTRAINT [PK_test.ParteHoras] PRIMARY KEY CLUSTERED 
	(
		[id] ASC
	)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
	) ON [PRIMARY]

	CREATE TYPE [test].[tblParteHoras] AS TABLE(
		[Trabajador] [uniqueidentifier] NOT NULL,
		[Fecha] [datetime] NOT NULL,
		[Horas] [smallint] NOT NULL
	)



end 

